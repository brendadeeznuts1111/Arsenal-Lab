# Bun System Gate - Bun Performance Rules
# Leverage Bun v1.3+ features for maximum performance

## BUN PERFORMANCE PRINCIPLES

### ⚡ Zero-Copy Operations (500x Faster)
**ALWAYS USE:**
```javascript
// ✅ OPTIMAL - Bun's native file operations
const data = await Bun.file('data.json').json();
await Bun.write('output.json', data);

// ✅ OPTIMAL - Bun's HTTP client
const response = await fetch('https://api.example.com');
const data = await response.json();

// ✅ OPTIMAL - Bun's WebSocket
const ws = new WebSocket('ws://localhost:3000');
```

**WHY:** Bun's native APIs provide 500x performance improvements over Node.js equivalents.

### 🚀 Bun Native Modules
**PREFER:**
```javascript
// ✅ OPTIMAL - Bun's built-in modules
import { serve } from 'bun';
import { SQL } from 'bun:sqlite';
import { hash } from 'bun:crypto';

// Instead of external packages
// ❌ AVOID: import express from 'express';
// ❌ AVOID: import sqlite3 from 'sqlite3';
// ❌ AVOID: import bcrypt from 'bcrypt';
```

**WHY:** Bun native modules are faster and more secure than external packages.

## MEMORY OPTIMIZATION

### 📊 Efficient Data Structures
**USE:**
```javascript
// ✅ OPTIMAL - Bun's fast data structures
const map = new Map(); // Faster than objects for frequent access
const set = new Set(); // Optimized for uniqueness checks
const buffer = new Uint8Array(); // Zero-copy binary data
```

### 🗂️ Streaming & Buffers
**LEVERAGE:**
```javascript
// ✅ OPTIMAL - Bun's streaming capabilities
const stream = Bun.file('large-file.txt').stream();
for await (const chunk of stream) {
  // Process in chunks, minimal memory usage
}
```

## ASYNC/AWAIT PATTERNS

### ⚡ Concurrent Operations
**ALWAYS USE:**
```javascript
// ✅ OPTIMAL - Bun's fast Promise implementation
const results = await Promise.all([
  fetch('/api/users'),
  fetch('/api/posts'),
  Bun.file('config.json').json()
]);
```

### 🚀 Top-Level Await
**SAFE TO USE:**
```javascript
// ✅ ALLOWED - Bun supports top-level await
const config = await Bun.file('config.json').json();
const db = new SQL('database.db');

export { config, db };
```

## BUN V1.3+ FEATURES

### 🔐 Enhanced Security
```javascript
// ✅ OPTIMAL - Bun's crypto modules
import { hash, sign, verify } from 'bun:crypto';

// ✅ OPTIMAL - Bun's WebCrypto
const key = await crypto.subtle.generateKey('AES-GCM', true, ['encrypt']);
```

### 🌐 HTTP/2 & WebSockets
```javascript
// ✅ OPTIMAL - Bun's HTTP/2 support
const server = Bun.serve({
  port: 3000,
  fetch(req) {
    return new Response('Hello from Bun!');
  }
});
```

### 📁 File System Operations
```javascript
// ✅ OPTIMAL - Bun's fast FS operations
const exists = await Bun.file('file.txt').exists();
const text = await Bun.file('file.txt').text();
const bytes = await Bun.file('file.txt').bytes();
```

## PERFORMANCE METRICS

### 📈 Benchmarking
**ALWAYS TEST:**
```bash
# Run performance benchmarks
bun run bench

# Check memory usage
bun run bench:memory

# Profile operations
bun run bench:profile
```

### 🎯 Performance Targets
- **500x faster** than Node.js for file operations
- **7.9x faster** database operations
- **Zero-copy** message passing
- **28% less** memory usage

## CODE QUALITY STANDARDS

### 🧪 Testing
```bash
# Run full test suite
bun test

# Coverage requirements: 83.77%+
bun test --coverage
```

### 📏 TypeScript
```typescript
// ✅ REQUIRED - Strict typing
interface User {
  readonly id: string;
  name: string;
  email: string;
}

const user: User = {
  id: '123',
  name: 'John',
  email: 'john@example.com'
};
```

### 🏗️ Architecture
- **Microservices**: Clean separation of concerns
- **A+ Grade**: Enterprise architecture patterns
- **Scalable**: Horizontal scaling ready
- **Observable**: Comprehensive logging and monitoring

## DEVELOPMENT WORKFLOW

### 🚀 Development Server
```bash
bun run dev  # Hot reload, fast refresh
```

### 🔨 Build Process
```bash
bun run build  # Production-optimized build
bun run start  # Production server
```

### 🔍 Quality Gates
```bash
bun run lint     # Code quality
bun run test     # Unit tests
bun run type-check # TypeScript validation
bun run bench    # Performance benchmarks
```

## ENTERPRISE INTEGRATION

### ☁️ Cloud Deployment
```bash
# Deploy to various platforms
bun run deploy:vercel
bun run deploy:railway
bun run deploy:fly
```

### 📊 Monitoring
```bash
# Enable metrics endpoint
bun run telemetry:init

# Check metrics
curl http://localhost:9464/metrics
```

---

**Performance is not a feature - it is a requirement. Every line of code must leverage Bun's 500x performance advantages.** ⚡
