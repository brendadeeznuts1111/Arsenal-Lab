# Bun System Gate - Security Rules
# Critical security invariants and governance requirements

## BLOCKER VIOLATIONS (Must Fix Immediately)

### üö´ Code Execution Security
**NEVER USE:**
```javascript
// ‚ùå BLOCKED - Dynamic code execution
eval(userInput);
new Function(codeString);
setTimeout(userCode, 1000);
setInterval(dynamicCode, 5000);
```

**WHY:** These create security vulnerabilities and violate invariant validation.

### üö´ Cryptographic Weaknesses
**NEVER USE:**
```javascript
// ‚ùå BLOCKED - Insecure algorithms
crypto.createHash('md5');
crypto.createHash('sha1');
require('rapidhash'); // Non-cryptographic hash
```

**WHY:** Security packages must use only cryptographically secure algorithms.

### üö´ Unauthorized Environment Access
**NEVER USE in security packages:**
```javascript
// ‚ùå BLOCKED - Unauthorized env access
const secret = process.env.API_KEY;
const config = process.env.DATABASE_URL;
```

**WHY:** Security packages cannot introduce unauthorized environment variable access.

## AMBER VIOLATIONS (Review Required)

### ‚ö†Ô∏è Layer Boundary Issues
**AVOID:**
```javascript
// ‚ö†Ô∏è AMBER - UI importing database
import { db } from './database/connection';
// UI components should not directly access database
```

**WHY:** Maintains clean architecture separation.

### ‚ö†Ô∏è Large Patch Complexity
**REVIEW:**
- Patches >5000 characters trigger amber warnings
- Complex patches require architectural review

## APPROVED PATTERNS

### ‚úÖ Secure Cryptography
```javascript
// ‚úÖ ALLOWED - Secure algorithms
crypto.createHash('sha256');
crypto.createHash('sha512');
import { createHash } from 'crypto';
```

### ‚úÖ Controlled Environment Access
```javascript
// ‚úÖ ALLOWED - In config/setup files
const port = process.env.PORT || 3000;
const nodeEnv = process.env.NODE_ENV;

// ‚úÖ ALLOWED - With proper validation
if (process.env.API_KEY && typeof process.env.API_KEY === 'string') {
  // Secure usage
}
```

### ‚úÖ Safe Dynamic Operations
```javascript
// ‚úÖ ALLOWED - Static, controlled operations
const routes = {
  '/api/users': handler,
  '/api/posts': handler
};
```

## GOVERNANCE COMMANDS

### üîç Validation
```bash
bun run invariant:validate  # Check all security invariants
bun run tension:check      # Monitor amber/block tensions
```

### üìä Reporting
```bash
bun run gate:sarif        # Generate GitHub Security tab reports
bun run gate:sign         # Cryptographically sign patches
```

### üö® Emergency Response
```bash
# Disable rules temporarily (if LaunchDarkly configured)
launchdarkly toggle crypto-integrity off
launchdarkly toggle no-eval off
```

## SECURITY PRINCIPLES

1. **Fail Secure**: Default to secure behavior
2. **Defense in Depth**: Multiple security layers
3. **Zero Trust**: Validate everything
4. **Audit Everything**: Complete traceability
5. **Automate Governance**: No manual security processes

## ENTERPRISE COMPLIANCE

- **FAANG Grade**: Meets highest enterprise security standards
- **A+ Technical Review**: Comprehensive assessment completed October 2025
- **Zero Critical Violations**: All code passes invariant validation
- **Cryptographic Signing**: Every patch has .sig verification
- **Automated Enforcement**: Pre-commit hooks ensure compliance

---

**Security is not optional - it is mandatory. Every line of code must pass governance validation.** üõ°Ô∏è
