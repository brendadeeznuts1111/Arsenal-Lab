name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: '1.3.0'

      - name: Run security audit
        run: bun audit

      - name: Install security tools
        run: |
          bun add -d audit-ci@^7.1.0
          bun add -d @microsoft/security-devops-action

      - name: Run audit-ci
        run: bunx audit-ci --config audit-ci.json
        continue-on-error: true

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript
          queries: security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'

      - name: Security DevOps Scan
        uses: microsoft/security-devops-action@v1
        id: msdo
        with:
          tools: template

      - name: Upload Security Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-results
          path: |
            ${{ steps.msdo.outputs.sarifFile }}
            results.sarif
          retention-days: 30

  vulnerability-check:
    name: Vulnerability Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: '1.3.0'

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Check for known vulnerabilities
        run: |
          # Check for security vulnerabilities in dependencies
          bun audit --format json > audit-results.json || true

          # Check for outdated packages with security issues
          bun outdated --format json > outdated-results.json || true

      - name: Analyze security posture
        run: |
          echo "## Security Analysis Report" > security-report.md
          echo "" >> security-report.md
          echo "### Dependency Audit Results" >> security-report.md
          echo "\`\`\`json" >> security-report.md
          cat audit-results.json >> security-report.md 2>/dev/null || echo "{}" >> security-report.md
          echo "\`\`\`" >> security-report.md
          echo "" >> security-report.md
          echo "### Outdated Packages" >> security-report.md
          echo "\`\`\`json" >> security-report.md
          cat outdated-results.json >> security-report.md 2>/dev/null || echo "{}" >> security-report.md
          echo "\`\`\`" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 30

  secrets-scan:
    name: Secrets Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: '1.3.0'

      - name: Install TruffleHog
        run: |
          pip install trufflehog3

      - name: Scan for secrets
        run: |
          trufflehog3 --format json --output trufflehog-results.json . || true

      - name: Check for hardcoded secrets
        run: |
          echo "## Secrets Scan Results" > secrets-report.md
          echo "" >> secrets-report.md
          echo "### TruffleHog Findings" >> secrets-report.md
          echo "\`\`\`json" >> secrets-report.md
          cat trufflehog-results.json 2>/dev/null || echo "[]" >> secrets-report.md
          echo "\`\`\`" >> secrets-report.md
          echo "" >> secrets-report.md
          echo "### Manual Pattern Checks" >> secrets-report.md

          # Check for common secret patterns
          echo "#### API Keys:" >> secrets-report.md
          grep -r "api[_-]?key\|API[_-]?KEY" --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" . || echo "No API keys found" >> secrets-report.md

          echo "#### Passwords:" >> secrets-report.md
          grep -r "password\|PASSWORD" --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" . | grep -v "password.*=" | grep -v "PASSWORD.*=" || echo "No hardcoded passwords found" >> secrets-report.md

          echo "#### Tokens:" >> secrets-report.md
          grep -r "token\|TOKEN" --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" . | grep -v "token.*=" | grep -v "TOKEN.*=" || echo "No hardcoded tokens found" >> secrets-report.md

      - name: Upload secrets report
        uses: actions/upload-artifact@v4
        with:
          name: secrets-report
          path: secrets-report.md
          retention-days: 7

      - name: Fail on high-severity secrets
        run: |
          if grep -q '"severity": "high"' trufflehog-results.json 2>/dev/null; then
            echo "ğŸš¨ High-severity secrets detected! Failing build."
            exit 1
          fi
