name: Patch Governance & Security
on:
  push:
    branches: [ main, develop ]
    paths:
      - 'patches/**'
      - 'config/**'
      - 'rules/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'patches/**'
      - 'config/**'
      - 'rules/**'

jobs:
  governance:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      id-token: write  # For cosign signing

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Cosign
        uses: sigstore/cosign-installer@v3

      - name: Cache Bun dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            patches/
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lockb', 'patches/**/*.patch') }}
          restore-keys: |
            ${{ runner.os }}-bun-${{ hashFiles('bun.lockb', 'patches/**/*.patch') }}
            ${{ runner.os }}-bun-${{ hashFiles('bun.lockb') }}
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Initialize telemetry
        run: bun run src/telemetry.ts
        env:
          PROMETHEUS_PORT: 9464

      - name: Run invariant validation
        id: validation
        run: bun run invariant:validate

      - name: Generate SARIF report
        if: always()
        run: |
          # Create a sample violations file for demo (in real scenario, capture from validation)
          echo '[{"invariant": "sample-violation", "description": "Sample for demo", "severity": "low"}]' > violations.json
          bun run sarif-reporter.ts violations.json patch-governance.sarif

      - name: Upload SARIF report
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: patch-governance.sarif
          category: patch-governance

      - name: Sign patches with cosign
        if: success()
        run: |
          # Sign all patch files
          bun run signing.ts sign-all patches
        env:
          COSIGN_EXPERIMENTAL: true

      - name: Verify patch signatures
        run: bun run signing.ts verify-all patches

      - name: Upload patch signatures
        uses: actions/upload-artifact@v3
        with:
          name: patch-signatures
          path: patches/*.sig

      - name: Generate SBOM
        run: |
          # Generate SPDX SBOM for the patches
          bun run sbom-generator.ts patches/ sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: patch-sbom
          path: sbom.spdx.json

      - name: Run tension analysis
        run: |
          for patch in patches/*.patch; do
            if [ -f "$patch" ]; then
              pkg=$(basename "$patch" .patch)
              bun run tension:check "$patch" "$pkg" || true
            fi
          done

      - name: Run canary validation
        run: bun run canary:ctl check react || true

  security-audit:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run security audit
        run: bun audit --audit-level high

      - name: Upload security audit results
        uses: actions/upload-artifact@v3
        with:
          name: security-audit
          path: |
            *.json
            *.sarif

  release-validation:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Validate release
        run: |
          bun run invariant:validate
          bun run patch:audit
          bun run signing.ts verify-all

      - name: Create release artifacts
        run: |
          # Create release archive with all governance artifacts
          tar -czf governance-artifacts.tar.gz \
            patches/ \
            config/ \
            rules/ \
            *.sarif \
            *.spdx.json \
            patches/*.sig

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: governance-release-artifacts
          path: governance-artifacts.tar.gz
