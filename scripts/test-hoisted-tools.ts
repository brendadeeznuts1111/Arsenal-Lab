#!/usr/bin/env bun

/**
 * Test Hoisted Tools in Arsenal Lab
 *
 * Demonstrates how Bun v1.3.1 hoisting makes development tools globally accessible
 */

import { $ } from "bun";

async function testHoistedTools() {
  console.log("üõ†Ô∏è Testing Hoisted Development Tools in Arsenal Lab\n");

  // Test TypeScript accessibility
  console.log("1Ô∏è‚É£ TypeScript Compiler (tsc):");
  try {
    const tscVersion = await $`./node_modules/.bin/tsc --version`.nothrow();
    if (tscVersion.exitCode === 0) {
      console.log("   ‚úÖ TypeScript accessible globally");
      console.log(`   üìã Version: ${tscVersion.stdout.toString().trim()}`);

      // Test TypeScript compilation on a small file
      const testTs = `
interface User {
  id: number;
  name: string;
}

const user: User = { id: 1, name: "Test" };
console.log("TypeScript compilation works:", user.name);
`;

      await Bun.write("test-ts.ts", testTs);
      const compileResult = await $`./node_modules/.bin/tsc test-ts.ts --outDir . --target ES2020`.nothrow();
      if (compileResult.exitCode === 0) {
        console.log("   ‚úÖ TypeScript compilation successful");
      }
      await Bun.file("test-ts.ts").delete();
      await Bun.file("test-ts.js").delete().catch(() => {});

    } else {
      console.log("   ‚ùå TypeScript not accessible");
    }
  } catch (error) {
    console.log("   ‚ùå TypeScript error:", error.message);
  }

  console.log();

  // Test ESLint accessibility
  console.log("2Ô∏è‚É£ ESLint:");
  try {
    const eslintVersion = await $`./node_modules/.bin/eslint --version`.nothrow();
    if (eslintVersion.exitCode === 0) {
      console.log("   ‚úÖ ESLint accessible globally");
      console.log(`   üìã Version: ${eslintVersion.stdout.toString().trim()}`);

      // Test ESLint on a small file
      const testJs = `
// Test file for ESLint
function testFunction() {
  const unused = "test"; // This should trigger a warning
  console.log("ESLint test");
}

testFunction();
`;

      await Bun.write("test-eslint.js", testJs);
      const lintResult = await $`./node_modules/.bin/eslint test-eslint.js --format compact`.nothrow();
      console.log("   ‚úÖ ESLint execution successful");
      if (lintResult.stdout.toString().includes("warning")) {
        console.log("   üìã ESLint correctly detected issues");
      }

      await Bun.file("test-eslint.js").delete();

    } else {
      console.log("   ‚ùå ESLint not accessible");
    }
  } catch (error) {
    console.log("   ‚ùå ESLint error:", error.message);
  }

  console.log();

  // Test Prettier accessibility
  console.log("3Ô∏è‚É£ Prettier:");
  try {
    const prettierVersion = await $`./node_modules/.bin/prettier --version`.nothrow();
    if (prettierVersion.exitCode === 0) {
      console.log("   ‚úÖ Prettier accessible globally");
      console.log(`   üìã Version: ${prettierVersion.stdout.toString().trim()}`);

      // Test Prettier formatting
      const uglyCode = `function test( ){console.log("hello world")}`;
      await Bun.write("test-prettier.js", uglyCode);

      const formatResult = await $`./node_modules/.bin/prettier --write test-prettier.js`.nothrow();
      if (formatResult.exitCode === 0) {
        const formatted = await Bun.file("test-prettier.js").text();
        console.log("   ‚úÖ Prettier formatting successful");
        if (formatted.includes("function test()")) {
          console.log("   üìã Code properly formatted");
        }
      }

      await Bun.file("test-prettier.js").delete();

    } else {
      console.log("   ‚ùå Prettier not accessible");
    }
  } catch (error) {
    console.log("   ‚ùå Prettier error:", error.message);
  }

  console.log();

  // Test type discovery
  console.log("4Ô∏è‚É£ Type Discovery (@types/* packages):");
  try {
    // Check if @types/node is accessible
    const typesNodeExists = await Bun.file("node_modules/@types/node/index.d.ts").exists();
    console.log(`   ‚Ä¢ @types/node: ${typesNodeExists ? "‚úÖ available" : "‚ùå not found"}`);

    // Check if @types/bun is accessible
    const typesBunExists = await Bun.file("node_modules/@types/bun/index.d.ts").exists();
    console.log(`   ‚Ä¢ @types/bun: ${typesBunExists ? "‚úÖ available" : "‚ùå not found"}`);

    if (typesNodeExists && typesBunExists) {
      console.log("   ‚úÖ Type definitions globally accessible for better IntelliSense");
    }
  } catch (error) {
    console.log("   ‚ùå Type discovery error:", error.message);
  }

  console.log();

  // Practical usage examples
  console.log("5Ô∏è‚É£ Practical Usage Examples:");
  console.log("   üîß Run TypeScript on any file:");
  console.log("      bunx tsc --noEmit src/some-file.ts");
  console.log("");
  console.log("   üîç Lint any JavaScript/TypeScript file:");
  console.log("      bunx eslint src/components/");
  console.log("");
  console.log("   üé® Format any code file:");
  console.log("      bunx prettier --write src/**/*.ts");
  console.log("");
  console.log("   üìù Type checking across the project:");
  console.log("      bunx tsc --noEmit");

  console.log("\nüéØ Benefits of Hoisting in Arsenal Lab:");
  console.log("   ‚úÖ Development tools accessible from any directory");
  console.log("   ‚úÖ Consistent tool versions across the project");
  console.log("   ‚úÖ Better IntelliSense with global type definitions");
  console.log("   ‚úÖ Simplified CI/CD with predictable tool locations");
  console.log("   ‚úÖ Faster development workflow with global access");

  console.log("\nüîó Reference: https://bun.com/blog/bun-v1.3.1#publichoistpattern-and-hoistpattern");
}

// Run if called directly
if (import.meta.main) {
  testHoistedTools().catch(console.error);
}
